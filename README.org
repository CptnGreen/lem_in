# lem_in

* Инструменты

** Spacemacs

   Отправной точкой для начала работы в этом замечательном редакторе является хорошее знание =vim='а, однако, =spacemacs= идёт дальше, предоставляя удобную точку входа в возможности IDE через нажатие пробела.

   Пробел - самая большая клавиша на кливиатуре, которую =vim= практически игнорирует, здесь же она используется на полную катушку.

   После долгого и мучительного процесса адаптации, переход на =spacemacs= даёт примерно такой же прирост производительности (и такую же зависимость от нового workflow), что и сам =vim=

** Magit

   Этот плагин (для работы с контролем версий через =git=) наравне с =org-mode=, по праву считается настоящей жумчужиной, если угодно "киллер-фичей" =emacs='а.

   Да, он может подвесить ваш любимый редактор на пару минут, если вы случайно включите в коммит папку с парой мегабайт кода, но возможность вносить правки в очередной коммит *построчно* - такого я раньше не видел.

   Также, благодаря взаимодействию с другими плагинами (такими как =ediff=) удобно организованы другие возможности гита, например слияние веток.

** LSP-mode

   Уважаю Microsoft за подобные проекты. =LSP=, или language service protocol - это сервер (daemon), который крутится у вас на компьютере и предоставляет любому редактору кода (умеющему с ним работать) по запросу такие инструменты, как подсветка синтаксиса, автодополнения, описание функций библиотек, подчёркивание ошибок и т.д. и т.п.

   Легко настраивается в =spacemacs=, работает хорошо, особо не тормозит.

** Thinkpad Yoga

   На протяжении всего проекта, чтобы разобраться в алгоритме или понять, почему что-то работает не так, как надо, мне приходилось от руки рисовать различные схемы.

   Уже давно одним из обязательных требований к моему личному рабочему компьютеру является наличие стилуса и экрана с диджитайзером. Писать на экране стилусом во многом куда удобнее, чем на обычной бумаге (возможность стирать, не портя холст, быстро переключать цвета, толщину линии, возможность перераспределить написанное по листу, сохраненить конспект в облако), так что на сегодняшний день я уже практически отказался от бумаги.

   Среди всех перепробованных мной устройств с описанным функционалом ноутбуки "2 в 1" из серии Thinkpad Yoga оказались самыми лучшими (добровольная реклама).


* Благодарности

  Этот мой общий проект с @fcatina.

  Можно сказать, что у проекта также был свой "кризис-менеджер" - [[https://github.com/krvkir][@krvkir]]. Наличие возможности обратиться к грамотному аналитику при работе над проектом - бесценно.

  Первичный толчок к написанию проекта дал отлично реализованный lem-in @hwolf'а, которого я проверял в Школе 21. Именно от него я изначально узнал в какую сторону копать и что гуглить.

  Также хочу поблагодарить @dbendu за предпроверку проекта и указание на его косяки.


* Статистика

- 4-6 недель активной работы
-

* Эволюция алгоритма

** Вступление

   Работу над проектом я начал с попытки придумать решение самостоятельно, используя только те подходы, которые мне уже были знакомы по прошлым проектам, в частности бэктрекинговый "Алгоритм Икс", который я успешно применил в =fillit='е.

   Несколько дней я пробовал свести новую задачу к работе с матрицей из нулей и единиц, необходимой для алгоритма Кнута, но потом почувствовал, что если это и получится сделать, такое решение окажется очень ресурсоёмким и в конечном счёте медленным.

   Во время проверки [[https://github.com/Xel4ek][@hwolf]]'а в Школе 21 я попросил его обозначить мне какие-то ключевые слова, которые нужно было гуглить, чтобы решить эту задачу, и он назвал алгоритм Форда-Фалкерсона - с этого началось моё погружение в теорию графов.

   Первое нормальное объяснение базовых вещей из этой совершенно новой для меня области знаний (поток, матрицы смежности и потоков) я получил от [[https://github.com/krvkir][@krvkir]], после чего уже активно искал информацию и самостоятельно.

   Очень полезным для меня оказался [[https://www.youtube.com/user/purpongie/playlists][канал на Ютубе]] за авторством Willian Fiset, где он очень хорошо объясняет теорию графов. Оттуда я узнал [[https://www.youtube.com/playlist?list=PLDV1Zeh2NRsAWrxWRTHJrsgBrbwqGzt-z][что такое очередь]], наконец-то понял как работает [[https://www.youtube.com/watch?v=oDqjPvD54Ss&list=PLDV1Zeh2NRsDGO4--qE8yH72HFL1Km93P&index=6&t=0s][поиск в ширину]] и, наконец, добрался до алгоритмов [[https://www.youtube.com/watch?v=LdOnanfc5TM&list=PLDV1Zeh2NRsDj3NzHbbFIC58etjZhiGcG&index=2&t=0s][Форда-Фалкерсона]] и [[https://www.youtube.com/watch?v=RppuJYwlcI8&list=PLDV1Zeh2NRsDj3NzHbbFIC58etjZhiGcG&index=7&t=452s][Эдмондса-Карпа]].

   Правда, я не сразу понял, как применить полученные знания к моей задаче и из наших кухонных обсуждений с @krvkir сперва родился алгоритм, основанный только на поиске в ширину, однако уже на том этапе были решены некоторые важные моменты, например, алгоритм непосредственно перемещения муравьёв по найденным путям.

   На тот момент я смог добиться работы программы на некоторых картах, но меня разозлило то, что я не мог прогнать свою программу через полноценный чекер из-за не совсем корректного аутпута, поэтому, так что я не выдержал, плюнул, и где-то на месяц забыл про проект.

   Вернувшись к нему, я быстро добился корректного аутпута, но тут же встретился лицом к лицу с несовершенствами самого алгоритма.

** Базовая реализация

-

## Новое

### Теория графов:

Структура данных "очередь"

Понятие потока

Матрица смежности

Алгоритм Форда-Фалкерсона

Поиск в ширину (BFS)

Алгоритм Эдмондса-Карпа

## Ссылки
